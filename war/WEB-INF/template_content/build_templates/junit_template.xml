<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- WARNING: auto-generated file. -->
<project basedir="." default="build" name="assessment">
	<property name='binDir' value='bin'/>
	<property name='sandboxUser' value='pastasandbox'/>
	
	<target name="makeBin">
		<mkdir dir="${binDir}"/>
		<chgrp file="${binDir}" group="${sandboxUser}" type="dir" />
		<chmod file="${binDir}" perm="g+ws" type="dir" />
	</target>
	<target name="makeWritable">
		{$?{hasWritable}
		<chgrp group="${sandboxUser}" type="file">
			<fileset dir="${binDir}">
				${writableFiles}
			</fileset>
		</chgrp>
		<chmod perm="g+w" type="file">
			<fileset dir="${binDir}">
				${writableFiles}
			</fileset>
		</chmod>
		}
	</target>
	<target name="copyNonJava">
        <echo message="Copying non-code from '${basedir}' to '${binDir}'"/>
		<copy includeemptydirs="false" todir="${binDir}">
            <fileset dir="${basedir}">
                <exclude name="**/*.java"/>
                <exclude name="**/*.class"/>
                <exclude name="build.xml"/>
            	<exclude name="${binDir}/**/*"/>
            </fileset>
        </copy>
	</target>
	
	<target name="movePreviousOutput" depends="checkPreviousOutput" if="previousOutput.exists">
	    <move todir="${binDir}">
			<fileset dir="${outDirectory}/pbbt_carry" /> 
	    </move>
	</target>
	<target name="checkPreviousOutput">
		<condition property="previousOutput.exists">
			<available file="${outDirectory}/pbbt_carry" type="dir"/>
		</condition>
	</target>
	
	<target name="init">
		<property environment="env"/>
	    <property name="debuglevel" value="source,lines,vars"/>
	    <property name="target" value="1.8"/>
	    <property name="source" value="1.8"/>
		<path id="lib.jars">
			<fileset dir="${libdirectory}">
				<include name="**/*.jar"/>
	            <include name="**/*.class"/>
			</fileset>
		</path>
	    <path id="assessment.classpath">
	        <pathelement location="${binDir}"/>
	        <path refid="lib.jars"/>
	    </path>
	</target>
	
    <target name="setup" depends="makeBin, copyNonJava, makeWritable, movePreviousOutput">
    </target>
	
    <target name="clean">
    	<echo message="Deleting .class files from '${binDir}'"/>
		<delete>
			<fileset dir="${binDir}" includes="**/*.class"/>
		</delete>
    </target>
    <target depends="init, setup" name="build">
        <echo message="Using javac to compile Java code in '${basedir}'"/>
    	<record name="${outDirectory}/compile.errors" loglevel="warn" action="start"/>
        <javac 
        	executable="${javacPath}"
        	fork="yes" 
        	includeantruntime="false" 
        	debug="true" 
        	debuglevel="${debuglevel}" 
        	srcdir="${basedir}" 
        	destdir="${binDir}" 
        	source="${source}" 
        	target="${target}">
			<exclude name="origSubmission/**/*"/>
			<exclude name="${binDir}/**/*"/>
            <classpath refid="assessment.classpath"/>
        </javac>
    	<record name="${outDirectory}/compile.errors" action="stop"/>
    </target>
	<target name="test" depends="init">
        <echo message="Running JUnit '${testName}'"/>
        <junit 
        	jvm="${javaPath}"
        	filtertrace="${filterStackTraces}" 
        	fork="yes" 
        	timeout="${advancedTimeout}" 
        	dir="${binDir}">
			<formatter type="xml" />
            <test name="${testName}" outfile="${testOutputFile}" />
            <classpath refid="assessment.classpath"/>
        </junit>
		<exec executable="mv" dir="${basedir}">
			<arg value="${testOutputFile}.xml"/>
			<arg value="${outDirectory}/"/>
		</exec>
    </target>
</project>
